plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "io.github.pacifistmc.forgix" version "1.2.9"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:@YARN_MAPPINGS@:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    JavaVersion targetVersion = JavaVersion.VERSION_17

    sourceCompatibility = targetVersion
    targetCompatibility = targetVersion

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.
        if (JavaVersion.current().isJava9Compatible()) {
            it.options.release.set(Integer.parseInt(targetVersion.getMajorVersion()))
        }
    }

    java {
        withSourcesJar()
    }
}

def ext_fileFormat = "${rootProject.archives_base_name}-${rootProject.mod_version}"

forgix {
    group = rootProject.group
    mergedJarName = "${ext_fileFormat}.jar"
    outputDir = "build/libs"

    forge {
        jarLocation = "build/libs/${ext_fileFormat}.jar"
    }

    fabric {
        jarLocation = "build/libs/${ext_fileFormat}.jar"
    }
}
